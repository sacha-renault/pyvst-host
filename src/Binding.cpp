#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/functional.h>
#include <pybind11/numpy.h>

#include "cpp_host/PluginHost.hpp"  // Change this include to the library you are binding

namespace py = pybind11;

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


// You can add any code here


void py_init_module_MYLIB(py::module& m)      //  rename this function name!!!
{
    // You can add any code here


    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!
    ////////////////////    <generated_from:VstParameter.h>    ////////////////////
    auto pyClassVstParameter =
        py::class_<VstParameter>
            (m, "VstParameter", "")
        .def(py::init<>([](
        std::string title = std::string(), std::string shortTitle = std::string(), double defaultNormalizedValue = double(), int flags = int(), int stepCount = int(), int unitId = int(), std::string units = std::string())
        {
            auto r = std::make_unique<VstParameter>();
            r->title = title;
            r->shortTitle = shortTitle;
            r->defaultNormalizedValue = defaultNormalizedValue;
            r->flags = flags;
            r->stepCount = stepCount;
            r->unitId = unitId;
            r->units = units;
            return r;
        })
        , py::arg("title") = std::string(), py::arg("short_title") = std::string(), py::arg("default_normalized_value") = double(), py::arg("flags") = int(), py::arg("step_count") = int(), py::arg("unit_id") = int(), py::arg("units") = std::string()
        )
        .def_readwrite("title", &VstParameter::title, "")
        .def_readwrite("short_title", &VstParameter::shortTitle, "")
        .def_readwrite("default_normalized_value", &VstParameter::defaultNormalizedValue, "")
        .def_readwrite("id", &VstParameter::id, "")
        .def_readwrite("flags", &VstParameter::flags, "")
        .def_readwrite("step_count", &VstParameter::stepCount, "")
        .def_readwrite("unit_id", &VstParameter::unitId, "")
        .def_readwrite("units", &VstParameter::units, "")
        .def("can_automate",
            &VstParameter::canAutomate)
        .def("is_bypass",
            &VstParameter::isBypass)
        .def("is_hidden",
            &VstParameter::isHidden)
        .def("is_list",
            &VstParameter::isList)
        .def("is_program_change",
            &VstParameter::isProgramChange)
        .def("is_read_only",
            &VstParameter::isReadOnly)
        .def("is_wrap_around",
            &VstParameter::isWrapAround)
        ;


    m.def("convert_info_to_param",
        convertInfoToParam, py::arg("info"));
    ////////////////////    </generated_from:VstParameter.h>    ////////////////////


    ////////////////////    <generated_from:Utils.h>    ////////////////////
    m.def("create_midi_events",
        create_midi_events,
        py::arg("notes"),
        "A utility function to create MIDI note events");
    ////////////////////    </generated_from:Utils.h>    ////////////////////


    ////////////////////    <generated_from:PluginHost.hpp>    ////////////////////
    auto pyClassVstHost =
        py::class_<Steinberg::Vst::VstHost>
            (m, "VstHost", "")
        .def(py::init<double, int, int, int>(),
            py::arg("samplerate") = 44100.0, py::arg("max_samples_per_block") = 512, py::arg("process_mode") = Steinberg::Vst::ProcessModes::kOffline, py::arg("symbolic_sample_size") = Steinberg::Vst::SymbolicSampleSizes::kSample32)
        .def("init",
            &Steinberg::Vst::VstHost::init, py::arg("path"), py::arg("effect_id") = VST3::Optional<VST3::UID>{})
        .def("terminate",
            &Steinberg::Vst::VstHost::terminate)
        .def("get_parameters",
            &Steinberg::Vst::VstHost::getParameters)
        .def("set_parameter",
            &Steinberg::Vst::VstHost::setParameter, py::arg("id"), py::arg("value"))
        ;
    ////////////////////    </generated_from:PluginHost.hpp>    ////////////////////

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
}